<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20242.24.0807.0327                               -->
<workbook original-version='18.1' source-build='2024.2.2 (20242.24.0807.0327)' source-platform='mac' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='Book1_17253442103440' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='netflix_titles (netflix_titles)' inline='true' name='federated.0ynceyr18nsy561a7oic80gckz7e' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='netflix_titles' name='excel-direct.1ew60hl0fl69o013n2k3n0bwcmyg'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/adityavankani/Documents/SEM-5/Data Analysis &amp; Visulization/Practicals_DAV/netflix_titles.xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1ew60hl0fl69o013n2k3n0bwcmyg' name='netflix_titles' table='[netflix_titles$]' type='table'>
          <columns gridOrigin='A1:L8808:no:A1:L8808:0' header='yes' outcome='2'>
            <column datatype='string' name='show_id' ordinal='0' />
            <column datatype='string' name='type' ordinal='1' />
            <column datatype='string' name='title' ordinal='2' />
            <column datatype='string' name='director' ordinal='3' />
            <column datatype='string' name='cast' ordinal='4' />
            <column datatype='string' name='country' ordinal='5' />
            <column datatype='date' name='date_added' ordinal='6' />
            <column datatype='integer' name='release_year' ordinal='7' />
            <column datatype='string' name='rating' ordinal='8' />
            <column datatype='string' name='duration' ordinal='9' />
            <column datatype='string' name='listed_in' ordinal='10' />
            <column datatype='string' name='description' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1ew60hl0fl69o013n2k3n0bwcmyg' name='netflix_titles' table='[netflix_titles$]' type='table'>
          <columns gridOrigin='A1:L8808:no:A1:L8808:0' header='yes' outcome='2'>
            <column datatype='string' name='show_id' ordinal='0' />
            <column datatype='string' name='type' ordinal='1' />
            <column datatype='string' name='title' ordinal='2' />
            <column datatype='string' name='director' ordinal='3' />
            <column datatype='string' name='cast' ordinal='4' />
            <column datatype='string' name='country' ordinal='5' />
            <column datatype='date' name='date_added' ordinal='6' />
            <column datatype='integer' name='release_year' ordinal='7' />
            <column datatype='string' name='rating' ordinal='8' />
            <column datatype='string' name='duration' ordinal='9' />
            <column datatype='string' name='listed_in' ordinal='10' />
            <column datatype='string' name='description' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L8808:no:A1:L8808:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>show_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[show_id]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>show_id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>title</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>director</remote-name>
            <remote-type>130</remote-type>
            <local-name>[director]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>director</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cast</remote-name>
            <remote-type>130</remote-type>
            <local-name>[cast]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>cast</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date_added</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date_added]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>date_added</remote-alias>
            <ordinal>6</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>release_year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[release_year]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>release_year</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>130</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>duration</remote-name>
            <remote-type>130</remote-type>
            <local-name>[duration]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>duration</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listed_in</remote-name>
            <remote-type>130</remote-type>
            <local-name>[listed_in]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>listed_in</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[netflix_titles]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='duration in minutes' datatype='integer' name='[Calculation_4888798195381751808]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [type] = &quot;Movie&quot; THEN &#10;    INT(LEFT([duration], FIND([duration], &quot; min&quot;)-1))&#10;ELSEIF [type] = &quot;TV Show&quot; THEN &#10;    INT(LEFT([duration], FIND([duration], &quot; Season&quot;)-1))&#10;ELSE &#10;    NULL &#10;END' />
      </column>
      <column aggregation='CountD' caption='new_release' datatype='string' default-role='measure' default-type='quantitative' name='[Calculation_4888798195385139202]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF YEAR([date_added]) = YEAR(TODAY()) THEN &quot;Yes&quot; ELSE &quot;No&quot; END' />
      </column>
      <column caption='duration_cat' datatype='string' name='[Calculation_4888798195386023939]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [type] = &quot;Movie&quot; THEN &#10;    IF [Calculation_4888798195381751808] &lt; 60 THEN &quot;Short&quot;&#10;    ELSEIF [Calculation_4888798195381751808]  &gt;= 60 AND [Calculation_4888798195381751808] &lt;= 120 THEN &quot;Medium&quot;&#10;    ELSE &quot;Long&quot; &#10;    END &#10;ELSE &quot;Not Applicable&quot; &#10;END' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='netflix_titles' datatype='table' name='[__tableau_internal_object_id__].[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]' role='measure' type='quantitative' />
      <column caption='Cast' datatype='string' name='[cast]' role='dimension' type='nominal' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Date Added' datatype='date' name='[date_added]' role='dimension' type='ordinal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
      <column caption='Duration' datatype='string' name='[duration]' role='dimension' type='nominal' />
      <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
      <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
      <column caption='Release Year' datatype='integer' name='[release_year]' role='dimension' type='quantitative' />
      <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column-instance column='[director]' derivation='None' name='[none:director:nk]' pivot='key' type='nominal' />
      <group caption='Action (Director)' hidden='true' name='[Action (Director)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[director]' />
        </groupfilter>
      </group>
      <group caption='Action (Listed In)' hidden='true' name='[Action (Listed In)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[listed_in]' />
        </groupfilter>
      </group>
      <group caption='Action (Rating)' hidden='true' name='[Action (Rating)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[rating]' />
        </groupfilter>
      </group>
      <group caption='Action (Type)' hidden='true' name='[Action (Type)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[type]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='/var/folders/n5/0w1rb48s37n5pkvv3xm69t5m0000gn/T/tableau-temp/#TableauTemp_12zjry700j3auq147da5u0xp52bg.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='09/10/2024 04:31:46 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>show_id</remote-name>
              <remote-type>129</remote-type>
              <local-name>[show_id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>show_id</remote-alias>
              <ordinal>0</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8807</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[type]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>type</remote-alias>
              <ordinal>1</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>title</remote-name>
              <remote-type>129</remote-type>
              <local-name>[title]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>title</remote-alias>
              <ordinal>2</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8807</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>director</remote-name>
              <remote-type>129</remote-type>
              <local-name>[director]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>director</remote-alias>
              <ordinal>3</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2625</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cast</remote-name>
              <remote-type>129</remote-type>
              <local-name>[cast]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>cast</remote-alias>
              <ordinal>4</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5839</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>5</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>408</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date_added</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date_added]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>date_added</remote-alias>
              <ordinal>6</ordinal>
              <family>netflix_titles</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1405</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>release_year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[release_year]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>release_year</remote-alias>
              <ordinal>7</ordinal>
              <family>netflix_titles</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>85</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>rating</remote-name>
              <remote-type>129</remote-type>
              <local-name>[rating]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>rating</remote-alias>
              <ordinal>8</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>13</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>duration</remote-name>
              <remote-type>129</remote-type>
              <local-name>[duration]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>duration</remote-alias>
              <ordinal>9</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>216</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>listed_in</remote-name>
              <remote-type>129</remote-type>
              <local-name>[listed_in]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>listed_in</remote-alias>
              <ordinal>10</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>466</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>description</remote-name>
              <remote-type>129</remote-type>
              <local-name>[description]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>description</remote-alias>
              <ordinal>11</ordinal>
              <family>netflix_titles</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8807</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RIN_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:director:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Rajiv Chilaka&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jay Karas&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Suhas Kadav&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Youssef Chahine&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jay Chapman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Steven Spielberg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marcus Raboy&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Cathy Garcia-Molina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;RaÃºl Campos, Jan Suter&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Martin Scorsese&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='netflix_titles' id='netflix!titles_4D5CCF1EB80440A4AEB35E1F76D7D6D4'>
            <properties context=''>
              <relation connection='excel-direct.1ew60hl0fl69o013n2k3n0bwcmyg' name='netflix_titles' table='[netflix_titles$]' type='table'>
                <columns gridOrigin='A1:L8808:no:A1:L8808:0' header='yes' outcome='2'>
                  <column datatype='string' name='show_id' ordinal='0' />
                  <column datatype='string' name='type' ordinal='1' />
                  <column datatype='string' name='title' ordinal='2' />
                  <column datatype='string' name='director' ordinal='3' />
                  <column datatype='string' name='cast' ordinal='4' />
                  <column datatype='string' name='country' ordinal='5' />
                  <column datatype='date' name='date_added' ordinal='6' />
                  <column datatype='integer' name='release_year' ordinal='7' />
                  <column datatype='string' name='rating' ordinal='8' />
                  <column datatype='string' name='duration' ordinal='9' />
                  <column datatype='string' name='listed_in' ordinal='10' />
                  <column datatype='string' name='description' ordinal='11' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='country' name='[Action1_7F93F1537BB0449C80E24555A0F36283]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='Dashboard 1' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Country,Director' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action2_2C282585E379484094207609CC388D58]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet'>
        <exclude-sheet name='top_genres' />
        <exclude-sheet name='top_director' />
        <exclude-sheet name='top_countries' />
      </source>
      <command command='tsc:brush'>
        <param name='field-captions' value='Country,Rating,Type,YEAR(Date Added)' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter1' name='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='top_genres' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter2' name='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='show_type_count' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter3' name='[Action5_358C951D5A5B4AEB810BBA3912A77843]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='top_director' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter4' name='[Action6_61AB776CE3734889919E51D8D014EF53]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='rating' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[Longitude (generated)]' field-type='quantitative' max='25742557.931472015' min='-14609002.05223392' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[Latitude (generated)]' field-type='quantitative' max='15107515.909571871' min='-12678873.898119463' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <geometry column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Geometry (generated)]' />
              <lod column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:country:nk]' />
              <lod column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Latitude (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[Latitude (generated)]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{7ED6323E-8412-4C3B-9A48-68CE64EA1190}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column aggregation='CountD' caption='new_release' datatype='string' default-role='measure' default-type='quantitative' name='[Calculation_4888798195385139202]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF YEAR([date_added]) = YEAR(TODAY()) THEN &quot;Yes&quot; ELSE &quot;No&quot; END' />
            </column>
            <column-instance column='[Calculation_4888798195385139202]' derivation='CountD' name='[ctd:Calculation_4888798195385139202:qk]' pivot='key' type='quantitative' />
            <column-instance column='[title]' derivation='CountD' name='[ctd:title:qk]' pivot='key' type='quantitative' />
            <column caption='Date Added' datatype='date' name='[date_added]' role='dimension' type='ordinal' />
            <column-instance column='[title]' derivation='None' name='[none:title:nk]' pivot='key' type='nominal' />
            <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:title:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:Calculation_4888798195385139202:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:title:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:Calculation_4888798195385139202:qk]</cols>
      </table>
      <simple-id uuid='{6A209C51-B290-4BED-B278-31F28ADF88CF}' />
    </worksheet>
    <worksheet name='avg_duration'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column caption='duration in minutes' datatype='integer' name='[Calculation_4888798195381751808]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [type] = &quot;Movie&quot; THEN &#10;    INT(LEFT([duration], FIND([duration], &quot; min&quot;)-1))&#10;ELSEIF [type] = &quot;TV Show&quot; THEN &#10;    INT(LEFT([duration], FIND([duration], &quot; Season&quot;)-1))&#10;ELSE &#10;    NULL &#10;END' />
            </column>
            <column-instance column='[Calculation_4888798195381751808]' derivation='Avg' name='[avg:Calculation_4888798195381751808:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Duration' datatype='string' name='[duration]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]' value='10' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[avg:Calculation_4888798195381751808:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[avg:Calculation_4888798195381751808:qk]</cols>
      </table>
      <simple-id uuid='{009F51FA-3FC8-4ACC-8FCF-AC2EFB82B2C0}' />
    </worksheet>
    <worksheet name='rating'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:rating:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;G&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;NC-17&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;NR&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;PG&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;PG-13&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;R&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-14&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-G&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-MA&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-PG&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-Y&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-Y7&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;TV-Y7-FV&quot;' />
              <groupfilter function='member' level='[none:rating:nk]' member='&quot;UR&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:rating:nk]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:rating:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]</cols>
      </table>
      <simple-id uuid='{FE8CF9E7-6776-4A79-9CC7-AA04DE9E1521}' />
    </worksheet>
    <worksheet name='show_type_count'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]'>
            <groupfilter function='level-members' level='[none:type:nk]' />
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' value='55' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:type:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]</cols>
      </table>
      <simple-id uuid='{D0511933-FCA4-47CE-9AF9-E90E5371C805}' />
    </worksheet>
    <worksheet name='title_added_per_year'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Date Added' datatype='date' name='[date_added]' role='dimension' type='ordinal' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column-instance column='[date_added]' derivation='Year' name='[yr:date_added:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[yr:date_added:ok]</cols>
      </table>
      <simple-id uuid='{2750F0EE-0433-4847-A6E2-9F05B1C338FA}' />
    </worksheet>
    <worksheet name='top_countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:country:nk]'>
            <groupfilter count='5' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNTD([show_id])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;, France, Algeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;, South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Brazil, France, Poland, Germany, Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Chile&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Chile, Peru&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, France, United States, Germany, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, United States, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Uruguay, Serbia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Uruguay, Spain, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina, Venezuela&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, Armenia, Japan, Jordan, Mexico, Mongolia, New Zealand, Philippines, South Africa, Sweden, United States, Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, France, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, Iraq&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, New Zealand, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United Kingdom, United Arab Emirates, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United Kingdom, United States, New Zealand, Italy, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria, Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria, Iraq, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, France, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, Ireland, Netherlands, Germany, Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, India, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, Netherlands, United States, Colombia, Austria, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bulgaria, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bulgaria, United States, Spain, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cambodia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, France, Italy, Morocco, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Germany, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Germany, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Hungary, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, India, Thailand, United States, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Ireland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Japan, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Mexico, Germany, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Nigeria, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, South Korea, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, Spain, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United Kingdom, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, Cayman Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, India, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada, United States, United Kingdom, France, Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Argentina, France, Spain, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Peru&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, Spain, Argentina, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Germany, India, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Hong Kong, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, India, Nepal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Morocco, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, South Korea, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Spain, South Korea, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, United States, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, United States, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia, Mexico, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia, Peru, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Croatia, Slovenia, Serbia, Montenegro&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic, Slovakia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic, United Kingdom, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Brazil, France, Portugal, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, France, Belgium, Italy, Netherlands, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, France, Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, France, United States, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Germany, Belgium, United Kingdom, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Germany, Belgium, United Kingdom, France, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Indonesia, Finland, Norway, United Kingdom, Israel, France, United States, Germany, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Singapore, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Sweden, Israel, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, United Kingdom, South Africa, Sweden, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, United Kingdom, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark, Zimbabwe&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt, Algeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt, Austria, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt, Denmark, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt, Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland, Germany, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland, Sweden, Norway, Latvia, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Algeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Australia, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, Luxembourg, Cambodia,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, Luxembourg, Romania, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Belgium, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Brazil, Spain, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada, China, Cambodia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada, Italy, United States, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Canada, United States, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, China, Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Egypt&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Germany, Czech Republic, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Germany, Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Iran, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Israel, Germany, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Lebanon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Lebanon, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Luxembourg, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Luxembourg, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Malta, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Netherlands, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Netherlands, South Africa, Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Norway, Lebanon, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Senegal, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, South Korea, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, South Korea, Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, Switzerland, Spain, United States, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United Kingdom, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United States, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United States, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France, United States, United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Georgia, Germany, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Australia, France, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, China, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, France, Luxembourg, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, France, Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, France, United States, Canada, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Jordan, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, Hong Kong, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany, United States, United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ghana, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Greece, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, China, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, Iceland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hungary, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iceland, Sweden, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Germany, Austria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Germany, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Iran&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Nepal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Pakistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Soviet Union&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, Turkey&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, United Kingdom, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, United Kingdom, China, Canada, Japan, South Korea, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, United Kingdom, France, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia, South Korea, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iran, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Canada, Luxembourg, United States, United Kingdom, Philippines, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Canada, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Canada, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, France, Iceland, United States, Mexico, Belgium, United Kingdom, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Luxembourg, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, Switzerland, United Kingdom, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United Kingdom, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United Kingdom, Greece, France, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United Kingdom, Italy, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel, Germany, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel, Germany, Poland, Luxembourg, Belgium, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel, Sweden, Germany, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Brazil, Greece&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Canada, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, France, Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, South Africa, West Germany, Australia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Switzerland, Albania, Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Switzerland, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, Turkey&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, United Kingdom, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, United States, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jamaica, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kenya, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kuwait, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, Canada, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, Palestine, Denmark, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, Syria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, United Arab Emirates, France, Switzerland, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon, United States, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malaysia, Singapore, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritius, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, France, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico, United States, Spain, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Belgium, Germany, Jordan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Belgium, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Denmark, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Denmark, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Germany, Denmark, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, Germany, Italy, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand, Australia, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand, United Kingdom, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nigeria, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Denmark, Netherlands, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Denmark, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Germany, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Iceland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, United Kingdom, France, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan, Norway, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Paraguay, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Peru, Germany, Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Peru, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines, Canada, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines, Singapore, Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland, West Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Portugal, France, Poland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Portugal, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Portugal, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Puerto Rico, United States, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania, Bulgaria, Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania, France, Switzerland, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia, Poland, Serbia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia, United States, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia, Netherlands, Germany, Jordan, United Arab Emirates, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia, Syria, Egypt, Lebanon, Kuwait&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Serbia, South Korea, Slovenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Serbia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore, Japan, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore, Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Slovenia, Croatia, Germany, Czech Republic, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Somalia, Kenya, Sudan, South Africa, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, Angola&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, Germany, Netherlands, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, United States, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, United States, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa, United States, New Zealand, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, Canada, United States, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Soviet Union, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Belgium, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Cuba&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, France, Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Germany, Denmark, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Italy, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Mexico, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Portugal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, Thailand, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden, Czech Republic, United Kingdom, Denmark, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden, Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden, United Kingdom, Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, France, Belgium, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, United Kingdom, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland, Vatican City, Italy, Germany, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Syria, France, Lebanon, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan, China, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan, Hong Kong, United States, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan, Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey, Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey, France, Germany, Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey, South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, Jordan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, Jordan, Lebanon, Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, Romania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, United Kingdom, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates, United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Australia, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Australia, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Australia, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Australia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Belgium, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Brazil, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, United States, Cayman Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Canada, United States, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, China, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, China, United States, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Czech Republic, Germany, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Czech Republic, United States, Germany, Bahamas&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Denmark, Canada, Croatia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Egypt, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Finland, Germany, United States, Australia, Japan, France, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Belgium, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Belgium, Ireland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Belgium, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Canada, Belgium, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Germany, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Germany, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Poland, Germany, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, Spain, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, United States, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, France, United States, Belgium, Luxembourg, China, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, Canada, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, France, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, Spain, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, United Arab Emirates, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Germany, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Hungary, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, India, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, India, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Ireland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Israel, Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Italy, Israel, Peru, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Japan, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Jordan, Qatar, Iran&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Kenya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Lithuania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Malawi&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Namibia, South Africa, Zimbabwe, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Norway, Denmark, Germany, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Pakistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Poland, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Russia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, South Africa, Australia, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, South Africa, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Spain, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Spain, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Spain, United States, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Thailand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, Ukraine, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, France, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, France, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Germany, Denmark, Belgium, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, United States, Spain, Germany, Greece, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom, West Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Australia, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Australia, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Australia, Samoa, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Australia, South Africa, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Belgium, Canada, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Bermuda, Ecuador&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Botswana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Brazil, India, Uganda, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Brazil, Japan, Spain, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Brazil, South Korea, Mexico, Japan, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Cambodia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Cambodia, Romania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, Belgium, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, Indonesia, United Kingdom, China, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, Japan, Panama&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Canada, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Chile&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Chile, Israel&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, China, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, China, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, China, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, China, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Colombia, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Czech Republic, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, East Germany, West Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Canada, Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Canada, Lebanon, Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Canada, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Italy, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, Serbia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, South Korea, Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, France, United Kingdom, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, United Kingdom, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Germany, United Kingdom, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Ghana, Burkina Faso, United Kingdom, Germany, Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Greece&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Greece, Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Greece, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Hungary, Ireland, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Iceland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India, Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India, South Korea, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, India, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Ireland, United Kingdom, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Israel, Italy, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Israel, United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Italy, France, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Italy, Romania, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Italy, United Kingdom, Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Japan, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Malta, France, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Mexico, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Mexico, Spain, Malta&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Netherlands, Japan, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, New Zealand, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, New Zealand, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Norway, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Philippines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Senegal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, South Korea, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, South Korea, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Spain, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Sweden, Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Thailand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Canada, China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Canada, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Denmark, Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, France, Germany, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Germany, Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, United Kingdom, Spain, South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States, Venezuela&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Argentina, Germany, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Argentina, Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Guatemala&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay, Spain, Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Venezuela, Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;West Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <natural-sort column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:country:nk]' direction='DESC' />
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:country:nk]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:country:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]</cols>
      </table>
      <simple-id uuid='{9D348F09-607B-4B77-B8F3-5596D13932F8}' />
    </worksheet>
    <worksheet name='top_director'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[director]' derivation='None' name='[none:director:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]'>
            <groupfilter function='level-members' level='[listed_in]' user:ui-action-filter='[Action3_E82CB37A514B42A3A4BA09AA20F30C5B]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:director:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNTD([show_id])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:director:nk]' />
                  <groupfilter function='member' level='[none:director:nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:director:nk]' direction='DESC' using='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' />
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:director:nk]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Listed In)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='59' />
            <format attr='height' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:director:nk]' value='18' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' />
              <text column='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:director:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{BB5E727E-69E9-4404-9A09-854DDB365AD9}' />
    </worksheet>
    <worksheet name='top_genres'>
      <table>
        <view>
          <datasources>
            <datasource caption='netflix_titles (netflix_titles)' name='federated.0ynceyr18nsy561a7oic80gckz7e' />
          </datasources>
          <datasource-dependencies datasource='federated.0ynceyr18nsy561a7oic80gckz7e'>
            <column-instance column='[show_id]' derivation='CountD' name='[ctd:show_id:qk]' pivot='key' type='quantitative' />
            <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
            <column caption='Listed In' datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[listed_in]' derivation='None' name='[none:listed_in:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Show Id' datatype='string' name='[show_id]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]'>
            <groupfilter function='level-members' level='[director]' user:ui-action-filter='[Action5_358C951D5A5B4AEB810BBA3912A77843]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]'>
            <groupfilter function='level-members' level='[rating]' user:ui-action-filter='[Action6_61AB776CE3734889919E51D8D014EF53]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]'>
            <groupfilter function='level-members' level='[type]' user:ui-action-filter='[Action4_E7C195B4B8904D49B4DF06B23E8D9284]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:listed_in:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNTD([show_id])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:listed_in:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0ynceyr18nsy561a7oic80gckz7e].[none:listed_in:nk]' direction='DESC' using='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' />
          <slices>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:listed_in:nk]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Type)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Director)]</column>
            <column>[federated.0ynceyr18nsy561a7oic80gckz7e].[Action (Rating)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ynceyr18nsy561a7oic80gckz7e].[none:listed_in:nk]</rows>
        <cols>[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]</cols>
      </table>
      <simple-id uuid='{7CC4E4D4-7A34-40CC-A7CA-F640950B51F1}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97590' id='19' param='horz' type-v2='layout-flow' w='98868' x='566' y='1205'>
            <zone h='97590' id='15' param='horz' type-v2='layout-flow' w='98868' x='566' y='1205'>
              <zone h='97590' id='9' type-v2='layout-basic' w='98868' x='566' y='1205'>
                <zone h='32526' id='1' name='show_type_count' w='32946' x='566' y='1205'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='32532' id='3' name='title_added_per_year' w='32946' x='566' y='66263'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='36595' id='5' name='rating' w='32964' x='66470' y='37800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='24400' id='6' name='avg_duration' w='32964' x='66470' y='74395'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='32532' id='7' name='top_genres' w='32946' x='566' y='33731'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='48795' id='13' name='Sheet 1' w='32958' x='33512' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='48795' id='16' name='top_countries' w='32958' x='33512' y='1205'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='36595' id='17' name='top_director' w='32964' x='66470' y='1205'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout name='Phone'>
          <size maxheight='2650' minheight='2650' sizing-mode='vscroll' />
          <zones />
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{7820D907-21A3-4399-AC25-5B9EDC62CC32}' />
    </dashboard>
  </dashboards>
  <windows show-side-pane='false' source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{2ABBC95A-70FF-4D27-9F00-6F35AA55D93A}' />
    </window>
    <window class='worksheet' name='show_type_count'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{3884D57B-3C32-4FAB-969A-67A2FDD10AB1}' />
    </window>
    <window class='worksheet' name='title_added_per_year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{16A30D68-D1A3-45A5-8FA4-80D72DAD60F7}' />
    </window>
    <window class='worksheet' name='top_countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{38D20423-7CAB-47D0-94C7-AC2A02211A7B}' />
    </window>
    <window class='worksheet' name='rating'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{A6966F57-7C07-4C7F-A6C2-AEFAB4D7B865}' />
    </window>
    <window class='worksheet' name='avg_duration'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{75628BB1-3472-4C2A-96AC-BF1160255077}' />
    </window>
    <window class='worksheet' name='top_genres'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{240C9F00-A1AC-4BFF-8136-48156C7A66C0}' />
    </window>
    <window class='worksheet' name='top_director'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0ynceyr18nsy561a7oic80gckz7e].[ctd:show_id:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{2E744F24-4CE1-438D-BE24-34FCDE3FE6F6}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{3F1A91A7-7673-4DB9-A7A6-2BA81B4B68F1}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='avg_duration' />
        <viewpoint name='rating' />
        <viewpoint name='show_type_count' />
        <viewpoint name='title_added_per_year'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='top_countries' />
        <viewpoint name='top_director' />
        <viewpoint name='top_genres' />
      </viewpoints>
      <active id='13' />
      <simple-id uuid='{2773E52C-3438-4B62-933E-B1036F4E8839}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Dashboard 1' width='384'>
      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
      jUZmzZrFc889R0pKCqtWrSIrK4v09HRMJhORkZH9LuS2trby05/+FIvFQn5+Po8//jgBAQHM
      mDGDLVu28Pjjj5Oenk51dTWTJ0/m29/+9kXbtlgsPP744zz99NNMnz6dxsZGvva1r3HXXXfx
      zDPP8NJLLxEYGEh+fj6vvPIKADNmzODVV19lxowZnDx5ksrKyis6y1m0aBEvv/wys2fPZtq0
      aSxevPiyy0jScDF37lx++MMf0tDQQHR0NF//+tdZunQpTzzxBDNnzuTgwYN8/etfJzg4GDjb
      nfPLX/4Sm81GbW0tP/3pTy/bxoMPPsizzz7LiRMnMJlMWCwW/vVf/5Vly5ZdsJ20tDR++ctf
      YjKZaGpqorS09JIHnX2/06lTp/K73/2OX/7yl9pB4+XcfPPNfPbZZ3zve98jOTmZyspK5s6d
      y+rVq3n66afJzMwkLCyM/fv38/zzz1/hVh0YlxwFJISgtbWVyspKTCYTkyZNwmKx4Ha7cTqd
      2jUAt9uNy+XSdr6tra2cPn2a4OBgpk6d2u9UqaurC1VViYiIAM6ONHI4HERHR+Nyufjggw+0
      o+ZzTZkyhfnz5+Pz+SgtLcXlcjFx4kQCAgIQQvDTn/6URYsWaR+qw+Hgu9/9Lk8//TQej6ff
      NQs4e0ReV1dHe3s78fHxxMbGcvjwYYqKis5rW6/Xc++992KxWOjq6qK6uprw8HCSkpLQ6XS4
      XC5KSkro6elh+vTpWl+i3++nuLiYnp4eJkyYoPX1G41GOjo6tH8D/f4WQlBVVUVbW5v2ZZGk
      kUL877Dompoaxo0bR0JCAkIIqqurqaqqIjk5mZSUFBRFoaCggA8//JAvf/nLmEwmUlNTsVgs
      tLe389FHH11w/QsWLGDy5Mm43W6qqqrw+XykpaVp+4ILtSOEoKmpifLychISEoiLi8Pr9RIa
      GorL5cLtdmv7L5fLhcfj0X7HnZ2dlJeXExkZSWpqKj09Pej1+n79959fh9/vp66ujs7OThIS
      EoiOjkZRFBwOB6WlpTgcDiZMmEBkZOQAfxqXdskEMNj8fj+VlZUX7EMPCwvTThnP1dDQwP79
      +9m2bRu/+c1vtD5Ah8PBk08+qQ1XvRJtbW10dHSc97iiKKSmpl7xeiRJujIFBQVs3ryZH/7w
      h/0ed7vdVFdXX3CZmJgYeVB0gwyrBHAtSkpKOHbsGMuXLycqKkp73Ov1snv3bpYsWYJOJ0se
      SdJw1NfD0DdyUBpcIz4BSJIkSddGHhpLkiSNUTIBSJIkjVEyAUiSJI1RMgFIkiSNUTIBSJIk
      jVEyAUiSJI1RMgFIkiSNUTIBSJIkjVEyAUiSJI1RMgFIkiSNUTIBSJIkjVEyAUiSJI1RMgFI
      kiSNUTIBSJIkjVEyAUiSJI1RMgFIkiSNUaMyAVxoSsnBJoTA6/UOdRjDIgaQcXzecIjD7/fj
      9/uHOowRRwgxLPYxcP3fo1GZAIbLJGfD4UsyXH7gMo7+hkMcqqoOm9/KSDNcttv1fo9G5Szn
      f9lxgh3HqoY6DIQQKIoy5mOQcQzPOPp2YedG8YVZqTy4PHsowhlRfv5eLqV1nUMdxnV/j4Ys
      AQgh8Hg8mEwmFEVBVVV8Ph8mk+myy3m93ku+zuHy0m5z3uiQJWnUszs9g9JO39mHXq/v9+9z
      +Xw+FEU57/EL8fl8OBwOQkJCgLP7Cbvdjtlsxmg03vD4bXb3qNjHDFkXkM1mY926dbhcLgCK
      i4t5++23r2jZoqKigQxNkqQB1tjYyMmTJwFobm7mxIkT572mubmZ1tZW2traqKuru+T6ent7
      KSgoAM7u/D/99FMOHjzIxo0b6e3t5fjx4xfttjl16hQez+AkvuFmSM8AkpKSKCkpYebMmZSX
      lxMbG4sQghMnTlBdXU1sbCwTJ06koaGBrKwsiouLSU1NxWQyIYQgLy+Prq4upk6dyvjx44fq
      rUiSdJX6zvjhbD+2z+ejuLiYxsZGurq6WLhwIXq9Hp1OR05ODt3d3UydOpWsrCxycnJQFIVF
      ixahqir79u3D4XAQHh4OnN239Pb2cscdd6DX62lvb2f37t00NzczY8YM6uvraWpqIiIigkmT
      JrFr1y4qKiqYPn26FkdERAQ33XQTe/bswel0Mn36dBITE4dykw2IIb0InJSURF1dHR0dHURE
      RKAoCm63m9raWlauXInb7cZut3Pq1Cl8Ph9nzpzBbDZTXV1NdXU1bW1tpKWlsW/fvqF8G5Ik
      3QANDQ1MnTqV2267jdLSUjo7O7HZbMyYMYNZs2Yxa9Ys8vLyuPnmm5k2bRr5+fnk5uYya9Ys
      br/9dq2rSFEUsrOz+eCDD8jJySEiIoKMjAyWL19OTEwMEyZMYNasWVRUVGA0Gpk4cSKLFy8m
      MTGR48ePs2LFCux2O42NjbS1tbFkyRKioqKGeOsMjCFNAIqiEBsby+7du5kyZYr2WN/omb4L
      HOPHj2f37t1MmDCh3wUPg8GA1WrllltuGZL4JUm6NkajEbfbDYDb7cZgMKAoCkFBQRgMF+6Y
      UBSF7u5uDhw4wKlTp4iMjMTj8RAeHn7ehdDJkydz7733IoSgtrZWe1xVVTZv3kxLSwsGg6Ff
      t5Df76e5uZldu3bh9/sJDg5mzpw5bN26VeuuGm2GLAEYDAZCQ0OZPHkyQgjCwsKIiorCZDIR
      FhbGpk2bcLlcREdHM3HiRKqrq8nIyAAgIiKCpKQkFEXh5MmT1NTUDNXbkCTpGkRERFBZWcn+
      /fvJy8sjLS3toq8NDQ2lsLCQU6dOMWXKFFwul5Yk4uLi2Lp1Kzk5OdqQSFVV+eCDD9i3bx8N
      DQ2Eh4cTEhLCjh07aGlpwe12Y7PZ6OjoACAkJIS9e/fS0tJCSkoKer0eIQROp5OysjJCQ0Nx
      OBwDv1GGgCKGy4DWc/TdaKHT6VAUBSGEdjZwbqa/2ONvfHyETw+UDUXokjSi3TEvg0fvnjMo
      bfl8Pjo7OwkJCcFkMuH3+7VuHFVVtd+0oijaDthqteJyufD7/QQGBgJnB5QYjUbMZrO28/b5
      fNjtdgIDAzEajaiqSnd3N8HBwfh8PtxuN1arVTsLsNlsBAYGotfr6e3txWQyYTabcTqduFwu
      wsLC0OnOHi8LIXju9e2cqm4flO00kIZlArheR0rqKasf+jG6fr8PvX5ob7Xw+XwXPaWWcYzt
      OFRVBQV0yv91BGQkRjAnK2EIoxr+hBC89tFhKpu6hzoU7UD5Wo3KBHDukcRQ6bvPwWw2D2kc
      LpcLi8UypDHIOIZnHF6vF0VRhjwRjTR9PRRDvY+B6/8ejcpSEJIkSdLljcrUv6+whqKKlqEO
      A79fRa8f2hw7kDFMS4/l9hkpA7JuSRrOTla20usa3IJ+qfFhxEcG39B1DrsEcCNOr0pr29l+
      tPIGRiVdiMmolwlAGjR9w8Ovp8/7XH2DSK5lfe/tKBr0i8APrZrJXTdn3dB1DlgCKCwspKam
      BpvNRkhICNHR0UydOpXAwECampqw2+2kp6fj8XjYtm0bPp+PqKgoJk2aRGVlJbNnzx6o0CRJ
      GgTFxcWMGzeOkJAQiouLSUxMJDi4/xFsQUEBmZmZ2O12QkNDL1njq7S0FIvFQnJyMqqqcuzY
      MebMmUNhYSFxcXGUl5ezYMGCK46vvr4em83G5MmTr/k9jnQD1j+RnZ3NihUrCA0NZdWqVURE
      RHD69Gng7IceHR0NnP1Qk5OTufvuu5k1axaqqtLS0sKBAwdoaGgAztYNycvLo62tjY6ODhwO
      By6XSxv/3/c6SZKGj46ODq3GTnt7Ox6Ph/r6ek6dOsXRo0fx+/0kJJwdcbR9+3YOHTpEU1MT
      DoeDw4cPU1lZiRACt9tNfn4+xcXF/cofNzY20tLSQlVVFTExMaSmpgJQU1NDfn4+J06c0IrC
      HTlyhMLCQrxeL16vl4KCAk6ePInP58PlcnH48GFKSkpQVZXm5maKi4s5cuQIVVVVHDhwAKdz
      5Bd+u5BB66BOTk6mtrZW2+B9RwLJycmUl5dTUFBAV1cXAF1dXaSmppKbm4vD4SAvL4/MzEx2
      795Nd3c3hYWFlJSUsGvXLtxuN8eOHRustyFJ0nXYt28fZrOZ7u5uGhsbOXHiBD6fj7CwMGJj
      YwkODmbXrl0kJiZy+vRpOjo62Lp1K2FhYURGRvZbV3V1NRs3bmTZsmUAHDlyBIAdO3YQHR3N
      qVOncLvdbNq0ifj4eKqqqnA6nezcuZOAgADtIHTHjh3ExsbS1tbGmTNnyM/PRwhBZ2cntbW1
      hIaGaoXmRptBSwAmk4mAgABOnDhBSkqKdpNHYGAgd999N1OnTmXv3r2oqkpqaiqxsbFYrVa6
      urpISkoiKiqKmJgYwsLCaGxspLW1lZkzZ5Kbm3vJuwglSRoaOp3uvLIuwcHBpKenExsbq81m
      pdfrCQ4OJioqioCAAJqamjh16hQulwubzYaiKKSmphIREdFv/QkJCcTGxtLU1NTv8ZiYGBIT
      E4mMjMThcBAWFsa4ceMIDQ0FwOPxkJmZSWRkpHbNMSkpiWnTptHc3IzRaCQ1NZXo6GhSUlKI
      j4/XCteNNoM6RGXatGls2bKFzMxM7bHKyko+/vhjdu/eTVBQ0HkXZGJjYykvLyc3N5eWlhZC
      Q0Mxm83odDoyMjI4dOgQKSkpg/k2JEm6AvHx8Rw7doz29nbq6uq0O3cvxGQyUVdXh9PpJCoq
      iszMTKZNm0ZoaChOp5OmpqZ+NX3gbD2hZcuWcfDgQXp6ei64XrPZTGdnJ/n5+ZSUlABn7xOq
      r6+nurpaqyJQX1/PiRMniImJuXEbYAQY0BvBPj+ip68/LigoqN9rPB4PXq8Xq9WqlX7Q6XTa
      DV0+nw+bzUZoaCh6vV7rB9TpdNodlbIUxOC7c34Gj6y+srIBw+HGJxlHfwN9I5gQgvLycpqa
      msjKyiI6OprGxkbi4+Ox2Wzo9XqtjLOqqhQUFDBu3DgiIiI4efIkFouFiRMn4nA4KCoq0mqA
      BQYGIoSgqamJ+Ph4ent7cTgc+P1+4uPjtTZaWlqIjIzE6XTS2dnJsWPHtO6igoICwsLCSEhI
      wGKxcPz4cUJDQ8nKyqK1tZXIyEh6enowmUwYjUa6u7u1iqBDVQriQqOArvd7NCrvBN6wr5j9
      J+uHOgxUofa7zX5IYrjOW8UvZcGURNbcOvGKXjscdngyjv7Gwp3AQghyc3Pp6ekhNDSUBQsW
      XPdUnDIBDHN9X+yh5vV6B2Q6upEWg4xjeMbh9/tRFOWaDxD0ev2w+J0NNiEEDpeH/rMpDzyT
      UY/R0P/+qOtNAKM29Q+HL+Zw+IF8vntsrMfRt9Md6liGw/YwGAz9qm5KV85iMgyLWkDXa1Qm
      gAtNMD0UhkNROr/fr5XVHkp9O5qB6o66Ulcz0fhAGg6fixBiWHxHRyKP1w8+9aqWURQFi2l4
      7XKHVzSSJEkjwIvv7LnqawBJMSH89sk7ByiiazMqq4EOlyOa4RDHcIgBhkd3GJwdOTbUZyEw
      vD6X4aJvlGBjY6N2j8DlXt93CdPn89HY2Hjea7xerzaG3+FwMAoveV6Xof8lDIDh8qUeDnEM
      px2vjOP/DIfPZTh0hZ2rubmZzZs3U1tbS25uLtB/J/95Qgjy8vKAs/MK943zP9fp06eprq6m
      q6uLTZs2aeu6VCIYS0lCdgFJkjQs2Gw2IiMjuemmm1AUBY/Hw5YtWxBCkJ6eTlJSEnV1dUyZ
      MoW8vDzCw8M5fPgwdrud2bNnc/r0aXp7ewG46667tPUKIdi6dSsrVqzA6/WyadMmFEVh0qRJ
      xMbGUlRURFNTEytWrGDv3r34/X6mTJmCxWIhPz8ft9vNokWLtPsARpNReQbQp29e0L6jiL4b
      yPx+v3aL+o0mhNBOX1VV1drx+XyDdmShqip2ux2/39/vfauq2q+Y1kDzer309vZqcfSdig92
      HH1tejyefnGc+++B1nfDo9vt1uIYqs/F4/HQ29urxXBuN8pQHv1mZmYSFhbGe++9R35+vjYJ
      /OrVqyktLcXr9WKz2YCzxeUyMzPJzMxk6dKlmM1mJkyYwKpVq85b744dOwgICCAkJITCwkLm
      zJnD6tWrKS4uxuPxcPr0adasWUNVVRWxsbEsWLCAgoICYmNjycrKIioqilOnTg325hgUozYB
      uFwuPvzwQ3bv3s3Ro0dxOBwcOHAAVVXZtGnTgFT3s9vtbNiwgY0bNwJoNU18Ph8ff/zxoPzI
      e3t7+fDDD8nJyeEf//gHfr+fXbt2AWcrLvYV3BtodrudLVu2cOjQIT744AOEEFoc+/btO69+
      y0Dbu3ev9rns3LkTgKNHj1JRUTEo7Qsh+Otf/8revXs5cuRIv+2xdetWursHZ37ZhoYGPv30
      Uw4ePEhTUxMHDx7EbrfT1tambZehIoRgxowZ3HfffZw5cwafz4fJZNLKNVzMuZPHX2ik2ZIl
      SzCZTFRUVODz+TAajdprhRBkZ2djNBrx+Xy0tbVpZxm5ubl4PB5SUlIG7IBxqI3aLqCSkhJm
      zZpFRkYGH330ERMmTNDKviYnJ1+yLsm18vv9LFq0SOuX9Pv9eDwe9uzZw8yZMwfljkuz2cw9
      99yDTqdjw4YNeL1enE4np06dIigo6LyKigPFarWyatUqVFXl73//u1YFtqqqCq/Xq5UBHgyN
      jY3azgTOHhy0tLTQ0NAwaPNOeL1eIiIiWLJkiVYkzel0cuLECcLCws4rdDZQjh49yhe/+EWM
      RiMmk4mSkhK8Xi/bt29n9erVQ3pdoqqqivz8fAICAoiJiWHy5Mls3LiREydOaMUhS0tL6ezs
      xGazadtx27ZtzJkzR5t/+9wbo4xGIwaDgSVLlvDxxx9z2223sXPnToKCghg3bhwGg0H7XmRl
      ZVFWVoZOpyMwMJDAwEDKy8tRVZXY2Ngh2SYDbdQmgN7eXhITE1EUBbPZjN/vp6ioiJCQEL7x
      jW8MSJshISHaOPM+Bw8eJDw8nMWLFw9Im59nNBpxu9189tlnpKSkYDabKSsro76+noceemhQ
      YoCzR2PFxcXs2bOHjIwMDAYDNTU11NTU8NBDDw3ajsbn83HgwAFWrFihHeG2tLTw3nvvDWoc
      Xq8Xj8fDp59+SkhICLfeeiulpaU0NDQM2ucihKC5uZmcnBx6enrIzs7G6/Xyt7/9jTlz5mC1
      WgcljotJS0vTjrb7Dpa+/OUv4/V6tTOBf/qnf+pXvmLlypXa8zfffDNw9oi/T1bW/5VOuOee
      e7R1+nw+LWH0HRRZrVa+8pWvaGcJQgimTZumtT0ajdoEEBAQQG9vL5GRkXg8HnQ6HdOmTUOn
      01FSUsKkSZMGJY65c+dqlQzHjx8/4O2pqsrf/vY3lixZQlxcnHYBLSEhgWPHjjF37twBj6HP
      xIkTyczMZPPmzXR3d5OUlERGRgZ5eXksWrRoUH5UNTU12O12du3aRWlpKVVVVURHR7Ns2TL2
      7NnDHXfcMShxBAYG8qUvfQkhBJ988glut5vMzExiY2M5fvz4oJ2JREVFsXTpUlRVZcuWLQQG
      BnLPPffw2WefMWnSJAICAgYljov5/DBdnU6n7aiB88pnKIpyyVnELkSv11909EClfdsAACAA
      SURBVJOiKP3uFj+37XPNzIwn7irn540IGdoEeyGjNgFkZWXx8ccfU1FRQUREhDbsbtGiRfz9
      738nJibmhneHNDQ0aDuZAwcOMG7cOBRFYdmyZXzwwQesWbNmwI+yampqcDgcnD59mrKyMm1E
      xezZs9m0aRO1tbUkJSUNaAxwdkhffn4+4eHh2Gw2LBaLNvKisbGR0tJSJkyYMOBxpKWlkZaW
      pl3gTElJoaioiPHjx9PY2EhBQQEzZswY8DgaGhq0ipNer1fbsdx00018+umnxMXFMW7cuAGN
      QVEU0tPT2bJlC0ajkeTkZNrb2zGZTCxdupQtW7awZs2aUXu0eyN9edGkYTWE9lqNymJwfZxO
      J3a7nYiICBRF0U7t+kZ+3Og+ea/Xi9vtBv73tm+LBSEEBoMBr9eLTqcb8C+N3+/XLnArikJA
      QIDW/903+mkwipD13dRjt9sJDw/HaDRqp+qqqvbrkx8MfaOzzo2jb2TOxY7ybnT7TqdTK3+s
      0+m0OAb7c7HZbPj9fsLDw/uVU3e5XJjNZpkALuPzZe6HkqwGKkmSNIiEEOw8VkG7zXVd67ll
      2ngSoq6uG+nzZDVQSZKkQbb9SMV1zweQGhd23Qngeo3a+wAkSZLg7PWo1tbWoQ5jWJJnAJIk
      jWodHR3o9XrCwsKora0lMDCQmJgYent76erqQqfTkZCQgN/vp66uDpPJpE016fV6aW9vJy0t
      bVj0+d9oMgFIkjQm1NXV4Xa7KSgoYO7cuRw+fJikpCTa29vp7u4mNDSU3t5e6urq6Onpoaqq
      CqPRiNlspquri5tuummo38INJxOAJEmj2rm1jqqrq/F6vXR1dWG1WsnOzsblcnHkyBGCg4Op
      ra3F4/HQ0dGB0Whk/vz5+Hw+jh8/PsTvYmDIawCSJI1KPp8Pp9NJdXU1ERERFBUVsXDhQhIT
      EwG0chxnzpwhKiqKgoIC5s2bR1pa2hBHPnhkAhgD/H4/nZ2dOBwO7bHe3t7LXhirqakZ9Kqd
      V8LlcrFz505aWlqAs0d4bW1tdHR0AFBdXa39+1r09PT0+7u8vFyrQimNHHa7nX379pGQkEBk
      ZCSzZ8/m4MGDWCwWYmNj8Xg8HDp0CEVRmDJlCnPmzOHo0aP4fD6Sk5PJyMjQuoBGa1KQXUBj
      QFVVFc8++yzjx49Hp9PxwgsvaOUplixZop0iK4rC66+/zj333ENUVBQ7d+7k3nvvJSAgQCup
      3Xebft8cv6dPn+bkyZN8+ctf7tdm3/OKomiVFC81E5eqquh0OhoaGti6dSv/8i//0u/5c+fQ
      fffdd3G5XEybNg2Ad955h6KiInQ6HatXr6aiooIJEyYwb968q4qhz5NPPsmbb74JnE0umzdv
      5vbbb2fq1KlXsLWl4SI0NJTly5drfycnJ5OcnKz9nZWVRUZGhnZxNy4ujri4uAuuq++soU+w
      1Ux40LWPvwcwGob+orJMAGOAEIKZM2fy3HPP8f7777Nhwwbmzp2Lw+GguLiYt99+G6PRyMqV
      K9m4cSOlpaU8+OCD2O12VFXllVdewW63097ezosvvkhBQQGbNm0iPT2dpqYmTp8+TWdnJ9/8
      5jdRFIXNmzezY8cOpk6dysKFC/nDH/6ATqfjO9/5DoWFhWRmZmK1WsnLyyM2NpYdO3bQ2dnJ
      HXfcQUlJCbm5uXR3d/O9730PgHfffZf8/HzGjRvHmjVr2Lx5M+PHj6etrY3o6GiOHTvGN7/5
      TbKzs/H7/VRUVPD++++zfv16vvrVr5KZmcmvfvUrVFXlW9/6Fjk5Odx5553k5uai0+mYN28e
      e/bs4f777wfQ7hTfvHkz27dvp76+nttvv32oPj5pgJxbKO5qPXv/wlExKkgmgDFEURSys7P5
      6KOPtJo8TqeT6Oho7rnnHpKSkpgxYwYPPfQQ48aN45133sHv99PQ0MD/+3//j/Xr11NVVcVf
      /vIX1q1bh9FopKioiNjYWO2I3el0smHDBv7zP/8TRVH42c9+xre//W0cDgd//etfiYiIIC4u
      Tjva1+v1zJkzhxkzZvDmm2/yz//8z3g8Hh577DHgbFdVXl4e69atY926ddjtdm666SZWr16t
      /YAff/xx/vjHP+J0OnnuuecAWLVqFTExMWzZsoUjR47wwAMPEBISwltvvcXMmTM5cuQIJSUl
      2pnF5+tCeb1ePvzwQ371q1/xpz/9afA+JEkaRDIBjCFCCPbv309GRob22KpVqzhw4AD/8R//
      wbe+9a0LTqphMBgICAjAbDYjhNDqHBkMBgwGQ7/yvX6/X+s3VRQFr9dLUFAQer0ej8cDnO3u
      ObcCSWBgoNbN1Ferqa8ujtfrxWKxYDQaCQoK0moqGQwGLcaYmBjWrVvHZ599xieffEJgYCBW
      q1W7Rd7tdhMSEqItP3v2bF5//XUiIyPxer0cO3aMxx9/vN+26qsRZLVaR8WRnnRj1bf24PYN
      /fUxj8eLyXTtNaRkAhgDdDodhw8f5rHHHmP8+PHcf//9lJSUYDQa2blzJ4cPH8bv9xMUFMSk
      SZNYu3Yt3/72t7WdeN//jUYjRqORW2+9lR/84AekpqZy//33c+DAAYxGI9/61rcIDAwkOzub
      Z555hokTJ7Jy5UrWrl2Lqqo8/PDDtLa28oc//IGQkBAyMzO1JNLXTnR0NKWlpaxbt46nnnpK
      myzlRz/6EW63m4ceeoi9e/f2S1C//e1vaWtro7e3l+9///sUFhai1+vR6XSYTCZWrFjBz3/+
      c/R6Pffddx+JiYnU1tZy22234fP52LhxI9HR0dr6+nb8MTEx/OAHP6C5ublfjXlJem3D4esu
      BTEcyGJwEg6HQ5sZqa9qpcViueQFU7fbjdFo1Kpaqqrar6rmuc+7XC5tB99XJTQwMPCiVSd9
      Ph8+n087ghdC0NPTQ1BQ0AVjEkJo7V3saN3tdqOq6lXVuxdC4HA4sFqtskLmKNDe3q5VYr0Q
      t9tNXV0dMTEx+P1+wsLCLvg6IQTPvb59VCQAOQxUwmq1aqWZFUXBarVedrSM2WzWXtPX5XOx
      5y0Wi/a8oigEBQVdcodqMBj6VThUFIWQkJCLxtTXJXWprhqz2XzVk50oinLJRCWNLIcPH9YO
      VlRVxe/3a12RqqricrmoqanRRrwJIfD7/cNyKPSNIruAJEkaUzZv3oyqqnR2drJs2TIAcnNz
      MZlMWCwWurq6cLlcOBwOCgoK6O3tZcGCBYMykdJgkwlAkqQxRa/Xs3z5curr62lra6OhoYE7
      77wTv9+v3Qjm9XqJjIzU5vmuqKiQCUCSJGmk6xvp1te1d26Xz7mXRPfu3cuMGTMwGAwUFhYO
      VbgDSiYASZLGhMjISO2ej77rRqqqMmPGDG2e5ISEBAICAtDr9SQlJZGbm4vFYiEhIWGowx8Q
      chSQJElj3rnlUD7/2IUeHy2jgGQCkCRJugpCCHbnV9Lec31zAt8IPp9PuwnzWsgEIEmSdBWE
      EHg8nmExPNjv91/XneryGoAkSdJV0ul0WrmSoeT3+88r3XI1ZAKQJEm6SsOl4+R645B3AkuS
      JI1R8hqAJEnSVbjQiKGhcr2xyAQgSZI0RskuIEmSpDFKJgBJkqRr4PP5KCoqorGxcVAuCtfU
      1FBaWkp1dTVCCHp7eykoKKC7uxs4O4lRUVERzc3NV7xOmQAkSZKuwbZt2zAYDOTm5tLZ2Tmg
      bfl8Pvbv36+VslZVlU2bNhEcHMzmzZvxer1s27YNo9HIvn37rjgemQAkSZKukhACl8vFpEmT
      uPXWWykuLh7Q9np7ezGbzYSGhpKYmEhvby+RkZGkpaWRkpJCU1MTfr+frKws5s+fT1lZ2RWt
      VyYASZKkqySE0EowWCwWbb7rgWK1WklPT6eyspK///3veL1ebRKngIAAXC6XNrWqyWTC6/Ve
      0XplApAkSbpKOp1Om2a0bxrJgSSEYNKkScyfP1+bga+rqwshBE1NTURFReFyufD7/TQ0NBAZ
      GXlF65V3AkuSJF2DGTNm8I9//AO9Xs9dd901oG319PSQk5ODTqcjJiaGoKAgoqKi+PjjjwkJ
      CSEsLIzJkyezYcMGjEYjd9xxxxWtV94HIEmSdA36JpA5d3KZwWxPCIGqquh0Oq19VVWvKh6Z
      ACRJksYoeQ1AkiRpjJIJQJIkaYySCUCSJGmMkglAkiRpjJIJQJIkaYySCUCSJGmMkglAkiRp
      jJIJQJIkaYySCUCSJGmMkglAkiRpjJIJQJIkaYySCUCSJGmMkglAkiRpjJIJQJIkaYySCUCS
      JGmMkglAkiRpjJIJQJIkaYySCUCSJGmMkglAkiRpjJIJQJIkaYySCUCSJGmMkglAkiRpjJIJ
      QJIkaYySCUCSJGmMkglAkiRpjLpsAvjNb35DW1vbYMQiSZIkDaKLJgAhBF6vl7KyMhwOB16v
      F7/frz1XV1dHeXk5Xq9XW8bv9+P3+2lubqampkZ7/ZVQVZX29nZaW1vPa6upqYmysrJ+bamq
      it/vx+VyUVZWRkdHB0IIAHw+H0IIVFXFZrOhqipCCLq6uigpKcHpdGqvBfB6vTQ2NtLZ2Ymq
      qlccsyRJ0kimiHP3hOfw+/289NJL7Nmzh+TkZMxmM3fffTcrVqzg5ZdfprKykujoaOrq6li7
      di3jx4/nrbfeYseOHURGRqIoCna7nXXr1hESEnLJIBobG/nJT36CTqfDarVSVlbGK6+8woQJ
      E3j77bc5cOAA48ePp7y8nJ/97GfExcWxc+dO/vu//xu9Xk9CQgKnTp3i+eefZ8aMGfzgBz/g
      wQcf5I9//CM2m43f/va3HDlyhHfeeYesrCyKi4t5+umnmTFjBi0tLTz11FMkJCRgs9lITk7m
      hz/8IYqiDMgGlyRJGjbEZXzve98T9fX12t95eXni6aefFh6PR6iqKnbu3Cl++MMfCiGEePPN
      N8Vf//pXoaqq8Pv94ne/+5145513Lrl+VVXFc889Jz7++GOhqqpQVVX8+7//uygpKREVFRXi
      kUceEW63WwghxMaNG8Wrr74qhBBix44d4sc//rFwOp1CCCE+/fRT8cYbbwghhHjmmWfE/fff
      L7Zt2yZ8Pp9wOBzigQceEG1tbUIIIUpKSsRjjz0mhBBiw4YN4rXXXtNiaW1tFaqqXm6zSJIk
      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
    </thumbnail>
    <thumbnail height='384' name='Sheet 9' width='384'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
